using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.IO.Pipes;
using System.Linq;
using System.Text;
using System.Threading;
using VisualProfilerAccess.Metadata;
using VisualProfilerAccess.ProfilingData.CallTrees;

namespace VisualProfilerAccess
{
    class Program
    {
        private static NamedPipeServerStream _pipeServer;

        static void ReadFromPipe(object o)
        {
            while (true)
            {
                Console.WriteLine("Reading async: ");
                byte[] bytes = new byte[256];

                _pipeServer.Read(bytes, 0, bytes.Length);
                var str = Encoding.Unicode.GetString(bytes);
                Console.Write(str);
                Console.WriteLine();
            }


        }

        static void ReadFromPipe2(object o)
        {

            Console.WriteLine("Reading bytes: ");

            byte[] byteSizeBytes = new byte[sizeof(UInt32)];
            _pipeServer.Read(byteSizeBytes, 0, byteSizeBytes.Length);
            var streamLength = BitConverter.ToUInt32(byteSizeBytes, 0);

            if (streamLength == 0)
                return;

            byte[] bytes = new byte[streamLength];

           

            _pipeServer.Read(bytes, 0, bytes.Length);

            MemoryStream memoryStream = new MemoryStream(bytes);
            MetadataDeserializer.DeserializeAllMetadataAndCacheIt(memoryStream);


            //Console.ForegroundColor = Console.ForegroundColor == ConsoleColor.Blue ? ConsoleColor.Red : ConsoleColor.Blue;
            Console.Clear();


            while (memoryStream.Position < memoryStream.Length)
            {
                var deserializeCallTree = TracingCallTree.DeserializeCallTree(memoryStream);
                var s = deserializeCallTree.ToString();
                Console.WriteLine(s);
                Console.WriteLine();
            }

        }


        static void Main(string[] args)
        {

            Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-us");
            _pipeServer = new NamedPipeServerStream("VisualProfilerAccessPipe", PipeDirection.InOut, 1,
                                                    PipeTransmissionMode.Byte, PipeOptions.Asynchronous);


            //ProcessStartInfo processStartInfo = new ProcessStartInfo();
            //processStartInfo.FileName = @"D:\Honzik\Desktop\Mandelbrot\Mandelbrot\bin\Debug\Mandelbrot.exe";
            //processStartInfo.EnvironmentVariables.Add("COR_ENABLE_PROFILING", "1");
            //processStartInfo.EnvironmentVariables.Add("COR_PROFILER", "{19840906-C001-0000-000C-000000000002}");
            //processStartInfo.EnvironmentVariables.Add("VisualProfiler.PipeName", "VisualProfilerAccessPipe");
            //processStartInfo.UseShellExecute = false;
            //var process = Process.Start(processStartInfo);

            Console.Write("Waiting for client connection...");
            _pipeServer.WaitForConnection();
            Console.WriteLine("Client connected.");
            //_pipeServer.BeginRead(bytes, 0, bytes.Length, AsyncCallback, bytes);
            // ThreadPool.QueueUserWorkItem(ReadFromPipe);
            TextWriter tw = new StreamWriter(_pipeServer);
            while (true)
            {
                try
                {
                    tw.Write(101);
                    tw.Flush();
                    ReadFromPipe2(null);

                }

                catch (IOException e)
                {
                    Console.WriteLine("ERROR: {0}", e.Message);
                }
                Thread.Sleep(1000);
            }
        }

        static void Main2(string[] args)
        {
            #region bytes

            byte[] bytes = {
                               0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x34, 0x18, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x4C,
                               0x34, 0x18, 0x00, 0x03, 0x00, 0x00, 0x06, 0x16, 0x00, 0x00, 0x00, 0x4F, 0x00, 0x74, 0x00,
                               0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6F,
                               0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x34, 0x18, 0x00, 0x0E, 0x00, 0x00, 0x00,
                               0x58, 0x34, 0x18, 0x00, 0x04, 0x00, 0x00, 0x06, 0x32, 0x00, 0x00, 0x00, 0x54, 0x00, 0x65,
                               0x00, 0x73, 0x00, 0x74, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x61, 0x00,
                               0x67, 0x00, 0x65, 0x00, 0x57, 0x00, 0x69, 0x00, 0x74, 0x00, 0x68, 0x00, 0x32, 0x00, 0x41,
                               0x00, 0x72, 0x00, 0x67, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00,
                               0x73, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73,
                               0x00, 0x74, 0x00, 0x41, 0x00, 0x72, 0x00, 0x67, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x65, 0x00,
                               0x6E, 0x00, 0x74, 0x00, 0x41, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73,
                               0x00, 0x74, 0x00, 0x41, 0x00, 0x72, 0x00, 0x67, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x65, 0x00,
                               0x6E, 0x00, 0x74, 0x00, 0x42, 0x00, 0x6C, 0x34, 0x18, 0x00
                           };

            byte[] bytes2 = {

                               0xAA, 0x01, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0xF8, 0xAF, 0x53, 0x00, 0x01, 0x00, 0x00,
                               0x20, 0x18, 0x00, 0x00, 0x00, 0x54, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x41, 0x00,
                               0x73, 0x00, 0x73, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x62, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x01,
                               0x0C, 0x00, 0x00, 0x00, 0x9C, 0x2E, 0x19, 0x00, 0x01, 0x00, 0x00, 0x06, 0xF8, 0xAF, 0x53,
                               0x00, 0x0D, 0x00, 0x00, 0x00, 0x6C, 0x34, 0x19, 0x00, 0x02, 0x00, 0x00, 0x02, 0x2E, 0x00,
                               0x00, 0x00, 0x54, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D,
                               0x00, 0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x61, 0x00, 0x63, 0x00, 0x65, 0x00, 0x2E, 0x00,
                               0x54, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x43, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x73,
                               0x00, 0x73, 0x00, 0x00, 0x9C, 0x2E, 0x19, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x34, 0x34, 0x19,
                               0x00, 0x01, 0x00, 0x00, 0x06, 0x08, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x61, 0x00, 0x69, 0x00,
                               0x6E, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x61, 0x00, 0x72, 0x00, 0x67,
                               0x00, 0x73, 0x00, 0x6C, 0x34, 0x19, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x40, 0x34, 0x19, 0x00,
                               0x02, 0x00, 0x00, 0x06, 0x36, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73,
                               0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x54, 0x00, 0x68, 0x00, 0x61, 0x00, 0x74, 0x00,
                               0x43, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x73, 0x00, 0x4F, 0x00, 0x74, 0x00, 0x68,
                               0x00, 0x65, 0x00, 0x72, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6F, 0x00,
                               0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x34, 0x19, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x4C,
                               0x34, 0x19, 0x00, 0x03, 0x00, 0x00, 0x06, 0x16, 0x00, 0x00, 0x00, 0x4F, 0x00, 0x74, 0x00,
                               0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6F,
                               0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x34, 0x19, 0x00, 0x0E, 0x00, 0x00, 0x00,
                               0x58, 0x34, 0x19, 0x00, 0x04, 0x00, 0x00, 0x06, 0x32, 0x00, 0x00, 0x00, 0x54, 0x00, 0x65,
                               0x00, 0x73, 0x00, 0x74, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x61, 0x00,
                               0x67, 0x00, 0x65, 0x00, 0x57, 0x00, 0x69, 0x00, 0x74, 0x00, 0x68, 0x00, 0x32, 0x00, 0x41,
                               0x00, 0x72, 0x00, 0x67, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00,
                               0x73, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73,
                               0x00, 0x74, 0x00, 0x41, 0x00, 0x72, 0x00, 0x67, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x65, 0x00,
                               0x6E, 0x00, 0x74, 0x00, 0x41, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73,
                               0x00, 0x74, 0x00, 0x41, 0x00, 0x72, 0x00, 0x67, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x65, 0x00,
                               0x6E, 0x00, 0x74, 0x00, 0x42, 0x00, 0x6C, 0x34, 0x19, 0x00, 0x34, 0x00, 0x00, 0x00, 0x60,
                               0xE3, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x85, 0x09, 0x00, 0x00, 0x00, 0x00,
                               0x00, 0x71, 0x77, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x34,
                               0x19, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0xAA, 0x99, 0x00, 0x00,
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC2, 0xC2, 0x04, 0x00,
                               0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x40, 0x34, 0x19, 0x00, 0x02, 0x00, 0x00,
                               0x00, 0x02, 0x00, 0x00, 0x00, 0x9F, 0x8A, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x24, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                               0x00, 0x00, 0x00, 0x4C, 0x34, 0x19, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
                               0xC7, 0x67, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                               0x00, 0x66, 0x74, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x34,
                               0x19, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x49, 0xBE, 0x28, 0x00, 0x00,
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0xD8, 0x2A, 0x00,
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x34, 0x19, 0x00, 0x01, 0x00, 0x00,
                               0x00, 0x01, 0x00, 0x00, 0x00, 0x22, 0x09, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC2, 0xC2, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                               0x00, 0x00, 0x00, 0x58, 0x34, 0x19, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                               0xC0, 0x1E, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                               0x00, 0x61, 0x61, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,
                               0x00, 0x00, 0x00, 0x8A, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                               0x00
                           };
            #endregion

            Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-us");
            var fileStream = File.OpenRead(@"D:\tracingProfilerOutput.txt");


            MetadataDeserializer.DeserializeAllMetadataAndCacheIt(fileStream);


            var openWrite = File.OpenWrite(@"D:\tracingProfilerTextOutput_c#.txt");
            TextWriter tw = new StreamWriter(openWrite);
            while (fileStream.Position < fileStream.Length)
            {
                var deserializeCallTree = TracingCallTree.DeserializeCallTree(fileStream);
                var s = deserializeCallTree.ToString();
                //Console.WriteLine(s);
                //Console.WriteLine();
                tw.WriteLine(s);
                tw.WriteLine();
                tw.Flush();
            }
            tw.Close();
        }
    }
}
